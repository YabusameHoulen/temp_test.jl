# name: CI
# on:
#   push:
#     branches:
#       - master
#     tags: ['*']
#   pull_request:
#   workflow_dispatch:
# concurrency:
#   # Skip intermediate builds: always.
#   # Cancel intermediate builds: only if it is a pull request build.
#   group: ${{ github.workflow }}-${{ github.ref }}
#   cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}
# jobs:
#   test:
#     name: Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }} - ${{ github.event_name }}
#     runs-on: ${{ matrix.os }}
#     timeout-minutes: 60
#     permissions: # needed to allow julia-actions/cache to proactively delete old caches that it has created
#       actions: write
#       contents: read
#     strategy:
#       fail-fast: false
#       matrix:
#         version:
#           - '1.10'
#           - 'nightly'
#         os:
#           - ubuntu-latest
#         arch:
#           - x64
#     steps:
#       - uses: actions/checkout@v4
#       - uses: julia-actions/setup-julia@v1
#         with:
#           version: ${{ matrix.version }}
#           arch: ${{ matrix.arch }}
#       - uses: julia-actions/cache@v1
#       - uses: julia-actions/julia-buildpkg@v1
#       - uses: julia-actions/julia-runtest@v1
#       - uses: julia-actions/julia-processcoverage@v1
#       - uses: codecov/codecov-action@v4
#         with:
#           files: lcov.info
#   docs:
#     name: Documentation
#     runs-on: ubuntu-latest
#     permissions:
#       actions: write # needed to allow julia-actions/cache to proactively delete old caches that it has created
#       contents: write
#       statuses: write
#     steps:
#       - uses: actions/checkout@v4
#       - uses: julia-actions/setup-julia@v1
#         with:
#           version: '1'
#       - uses: julia-actions/cache@v1
#       - name: Configure doc environment
#         shell: julia --project=docs --color=yes {0}
#         run: |
#           using Pkg
#           Pkg.develop(PackageSpec(path=pwd()))
#           Pkg.instantiate()
#       - uses: julia-actions/julia-buildpkg@v1
#       - uses: julia-actions/julia-docdeploy@v1
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#           DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }}
#       - name: Run doctests
#         shell: julia --project=docs --color=yes {0}
#         run: |
#           using Documenter: DocMeta, doctest
#           using temp_test
#           DocMeta.setdocmeta!(temp_test, :DocTestSetup, :(using temp_test); recursive=true)
#           doctest(temp_test)
name: CI
on:
  - push
  - pull_request
env:
  JULIA_NUM_THREADS: 2
jobs:
  test:
    name: Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }} - ${{ github.event_name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        version:
          - '1.6'
          - '1'
          - 'nightly'
        os:
          - ubuntu-latest
          - macOS-latest
          - windows-latest
        arch:
          - x64
    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/setup-julia@v1
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
          include-all-prereleases: true
      - uses: actions/cache@v3
        env:
          cache-name: cache-artifacts
        with:
          path: ~/.julia/artifacts
          key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
          restore-keys: |
            ${{ runner.os }}-test-${{ env.cache-name }}-
            ${{ runner.os }}-test-
            ${{ runner.os }}-
      - uses: julia-actions/julia-buildpkg@latest
      - uses: julia-actions/julia-runtest@latest
      - uses: julia-actions/julia-processcoverage@v1
      - uses: codecov/codecov-action@v3
        with:
          file: lcov.info
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/setup-julia@v1
        with:
          version: '1'
      - run: |
          julia --project=docs -e '
            import Pkg; Pkg.add("Documenter")
            using Pkg
            Pkg.develop(PackageSpec(path=pwd()))
            Pkg.instantiate()'
      - run: |
          julia --project=docs -e '
            import Pkg; Pkg.add("Documenter")
            using Documenter: doctest
            using temp_test
            doctest(temp_test)'
      - run: julia --project=docs docs/make.jl
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }}